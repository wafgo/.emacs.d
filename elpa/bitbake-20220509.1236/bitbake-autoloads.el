;;; bitbake-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from bitbake.el

(put 'bitbake-server-host 'risky-local-variable t)
(put 'server-port 'risky-local-variable t)
(autoload 'bitbake-start-server "bitbake" "\
Start a bitbake server instance.

Start a bitbake server using POKY-DIRECTORY to find the bitbake
binary and BUILD-DIRECTORY as the build directory.

(fn POKY-DIRECTORY BUILD-DIRECTORY)" t)
(autoload 'bitbake-task "bitbake" "\
Run bitbake TASK on RECIPE.

If FORCE is non-nil, force running the task.

(fn TASK RECIPE &optional FORCE)" t)
(autoload 'bitbake-recipe "bitbake" "\
Run bitbake RECIPE.

(fn RECIPE)" t)
(autoload 'bitbake-clean "bitbake" "\
Run bitbake clean on RECIPE.

(fn RECIPE)" t)
(autoload 'bitbake-compile "bitbake" "\
Run bitbake compile on RECIPE.

(fn RECIPE)" t)
(autoload 'bitbake-install "bitbake" "\
Run bitbake install on RECIPE.

(fn RECIPE)" t)
(autoload 'bitbake-fetch "bitbake" "\
Run bitbake install on RECIPE.

(fn RECIPE)" t)
(autoload 'bitbake-recompile "bitbake" "\
Run bitbake clean compile and install on RECIPE.

(fn RECIPE)" t)
(autoload 'bitbake-deploy "bitbake" "\
Deploy artifacts of RECIPE to bitbake-deploy-ssh host.

(fn RECIPE)" t)
(autoload 'bitbake-recompile-deploy "bitbake" "\
Recompile RECIPE and deploy its artifacts.

(fn RECIPE)" t)
(autoload 'bitbake-image "bitbake" "\
Run bitbake IMAGE.

If FORCE is non-nil, force rebuild of image,

(fn IMAGE &optional FORCE)" t)
(autoload 'bitbake-wic-create "bitbake" "\
Run wic WKS -e IMAGE.

(fn WKS IMAGE)" t)
(autoload 'bitbake-hdd-image "bitbake" "\
Create an hdd image using wic based on WKS definition file and bitbake IMAGE.

(fn WKS IMAGE)" t)
(autoload 'bitbake-flash-image "bitbake" "\
Create an hdd image using wic and flash it on bitbake-flash-device.

The hdd image is based on WKS definition file and bitbake IMAGE, see bitbake-hdd-image.

(fn WKS IMAGE)" t)
(defvar bitbake-minor-mode-map nil "\
Keymap for bitbake-mode.")
(autoload 'bitbake-mode "bitbake" "\


(fn)" t)
(register-definition-prefixes "bitbake" '("bitbake-" "wic-read-definition-file"))

;;; End of scraped data

(provide 'bitbake-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; bitbake-autoloads.el ends here
